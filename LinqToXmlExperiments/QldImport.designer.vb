'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Patientdb")>  _
Partial Public Class QldImportDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertPatient(instance As Patient)
    End Sub
  Partial Private Sub UpdatePatient(instance As Patient)
    End Sub
  Partial Private Sub DeletePatient(instance As Patient)
    End Sub
  Partial Private Sub InsertPostcode(instance As Postcode)
    End Sub
  Partial Private Sub UpdatePostcode(instance As Postcode)
    End Sub
  Partial Private Sub DeletePostcode(instance As Postcode)
    End Sub
  Partial Private Sub InsertDoctor(instance As Doctor)
    End Sub
  Partial Private Sub UpdateDoctor(instance As Doctor)
    End Sub
  Partial Private Sub DeleteDoctor(instance As Doctor)
    End Sub
  Partial Private Sub InsertPatientsAllergyQLD(instance As PatientsAllergyQLD)
    End Sub
  Partial Private Sub UpdatePatientsAllergyQLD(instance As PatientsAllergyQLD)
    End Sub
  Partial Private Sub DeletePatientsAllergyQLD(instance As PatientsAllergyQLD)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.LinqToXmlExperiments.My.MySettings.Default.PatientdbConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Patients() As System.Data.Linq.Table(Of Patient)
		Get
			Return Me.GetTable(Of Patient)
		End Get
	End Property
	
	Public ReadOnly Property Postcodes() As System.Data.Linq.Table(Of Postcode)
		Get
			Return Me.GetTable(Of Postcode)
		End Get
	End Property
	
	Public ReadOnly Property Doctors() As System.Data.Linq.Table(Of Doctor)
		Get
			Return Me.GetTable(Of Doctor)
		End Get
	End Property
	
	Public ReadOnly Property PatientsAllergyQLDs() As System.Data.Linq.Table(Of PatientsAllergyQLD)
		Get
			Return Me.GetTable(Of PatientsAllergyQLD)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Patients")>  _
Partial Public Class Patient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PatientID As Integer
	
	Private _RPAMRN As String
	
	Private _MedicareNo As System.Nullable(Of Long)
	
	Private _MedCardPositionNo As System.Nullable(Of Byte)
	
	Private _Title As String
	
	Private _FirstName As String
	
	Private _MiddleName As String
	
	Private _LastName As String
	
	Private _Address As String
	
	Private _SuburbID As Integer
	
	Private _HomePhone As String
	
	Private _WorkPhone As String
	
	Private _MobilePhone As String
	
	Private _OtherInfo As String
	
	Private _EmailAddress As String
	
	Private _DateOfBirth As System.Nullable(Of Date)
	
	Private _Sex As System.Nullable(Of Char)
	
	Private _DoctorID As System.Nullable(Of Integer)
	
	Private _ReferralDate As System.Nullable(Of Date)
	
	Private _ReferralLength As String
	
	Private _ReferralReport As String
	
	Private _SymptomsCategory As String
	
	Private _PotentialStudy As String
	
	Private _Progress As String
	
	Private _FileLocation As String
	
	Private _MaritalStatus As String
	
	Private _FathersFullName As String
	
	Private _MothersFullName As String
	
	Private _FathersSurname As String
	
	Private _MothersMaidenName As String
	
	Private _CountryOfBirth As String
	
	Private _PrefLanguage As String
	
	Private _Aboriginality As String
	
	Private _InterpreterRequired As String
	
	Private _PatientUsername As String
	
	Private _PatientPassword As String
	
	Private _DatePatientCreated As System.Nullable(Of Date)
	
	Private _PatientCreatedBy As String
	
	Private _LastUpdatedBy As String
	
	Private _LastUpdated As System.Nullable(Of Date)
	
	Private _PatientsAllergyQLDs As EntitySet(Of PatientsAllergyQLD)
	
	Private _Postcode As EntityRef(Of Postcode)
	
	Private _Doctor As EntityRef(Of Doctor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPatientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPatientIDChanged()
    End Sub
    Partial Private Sub OnRPAMRNChanging(value As String)
    End Sub
    Partial Private Sub OnRPAMRNChanged()
    End Sub
    Partial Private Sub OnMedicareNoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMedicareNoChanged()
    End Sub
    Partial Private Sub OnMedCardPositionNoChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnMedCardPositionNoChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnMiddleNameChanging(value As String)
    End Sub
    Partial Private Sub OnMiddleNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnSuburbIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSuburbIDChanged()
    End Sub
    Partial Private Sub OnHomePhoneChanging(value As String)
    End Sub
    Partial Private Sub OnHomePhoneChanged()
    End Sub
    Partial Private Sub OnWorkPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnWorkPhoneChanged()
    End Sub
    Partial Private Sub OnMobilePhoneChanging(value As String)
    End Sub
    Partial Private Sub OnMobilePhoneChanged()
    End Sub
    Partial Private Sub OnOtherInfoChanging(value As String)
    End Sub
    Partial Private Sub OnOtherInfoChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnDateOfBirthChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateOfBirthChanged()
    End Sub
    Partial Private Sub OnSexChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnSexChanged()
    End Sub
    Partial Private Sub OnDoctorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDoctorIDChanged()
    End Sub
    Partial Private Sub OnReferralDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReferralDateChanged()
    End Sub
    Partial Private Sub OnReferralLengthChanging(value As String)
    End Sub
    Partial Private Sub OnReferralLengthChanged()
    End Sub
    Partial Private Sub OnReferralReportChanging(value As String)
    End Sub
    Partial Private Sub OnReferralReportChanged()
    End Sub
    Partial Private Sub OnSymptomsCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnSymptomsCategoryChanged()
    End Sub
    Partial Private Sub OnPotentialStudyChanging(value As String)
    End Sub
    Partial Private Sub OnPotentialStudyChanged()
    End Sub
    Partial Private Sub OnProgressChanging(value As String)
    End Sub
    Partial Private Sub OnProgressChanged()
    End Sub
    Partial Private Sub OnFileLocationChanging(value As String)
    End Sub
    Partial Private Sub OnFileLocationChanged()
    End Sub
    Partial Private Sub OnMaritalStatusChanging(value As String)
    End Sub
    Partial Private Sub OnMaritalStatusChanged()
    End Sub
    Partial Private Sub OnFathersFullNameChanging(value As String)
    End Sub
    Partial Private Sub OnFathersFullNameChanged()
    End Sub
    Partial Private Sub OnMothersFullNameChanging(value As String)
    End Sub
    Partial Private Sub OnMothersFullNameChanged()
    End Sub
    Partial Private Sub OnFathersSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnFathersSurnameChanged()
    End Sub
    Partial Private Sub OnMothersMaidenNameChanging(value As String)
    End Sub
    Partial Private Sub OnMothersMaidenNameChanged()
    End Sub
    Partial Private Sub OnCountryOfBirthChanging(value As String)
    End Sub
    Partial Private Sub OnCountryOfBirthChanged()
    End Sub
    Partial Private Sub OnPrefLanguageChanging(value As String)
    End Sub
    Partial Private Sub OnPrefLanguageChanged()
    End Sub
    Partial Private Sub OnAboriginalityChanging(value As String)
    End Sub
    Partial Private Sub OnAboriginalityChanged()
    End Sub
    Partial Private Sub OnInterpreterRequiredChanging(value As String)
    End Sub
    Partial Private Sub OnInterpreterRequiredChanged()
    End Sub
    Partial Private Sub OnPatientUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnPatientUsernameChanged()
    End Sub
    Partial Private Sub OnPatientPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPatientPasswordChanged()
    End Sub
    Partial Private Sub OnDatePatientCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatePatientCreatedChanged()
    End Sub
    Partial Private Sub OnPatientCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnPatientCreatedByChanged()
    End Sub
    Partial Private Sub OnLastUpdatedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastUpdatedByChanged()
    End Sub
    Partial Private Sub OnLastUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PatientsAllergyQLDs = New EntitySet(Of PatientsAllergyQLD)(AddressOf Me.attach_PatientsAllergyQLDs, AddressOf Me.detach_PatientsAllergyQLDs)
		Me._Postcode = CType(Nothing, EntityRef(Of Postcode))
		Me._Doctor = CType(Nothing, EntityRef(Of Doctor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PatientID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PatientID() As Integer
		Get
			Return Me._PatientID
		End Get
		Set
			If ((Me._PatientID = value)  _
						= false) Then
				Me.OnPatientIDChanging(value)
				Me.SendPropertyChanging
				Me._PatientID = value
				Me.SendPropertyChanged("PatientID")
				Me.OnPatientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RPAMRN", DbType:="VarChar(8)")>  _
	Public Property RPAMRN() As String
		Get
			Return Me._RPAMRN
		End Get
		Set
			If (String.Equals(Me._RPAMRN, value) = false) Then
				Me.OnRPAMRNChanging(value)
				Me.SendPropertyChanging
				Me._RPAMRN = value
				Me.SendPropertyChanged("RPAMRN")
				Me.OnRPAMRNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MedicareNo", DbType:="BigInt")>  _
	Public Property MedicareNo() As System.Nullable(Of Long)
		Get
			Return Me._MedicareNo
		End Get
		Set
			If (Me._MedicareNo.Equals(value) = false) Then
				Me.OnMedicareNoChanging(value)
				Me.SendPropertyChanging
				Me._MedicareNo = value
				Me.SendPropertyChanged("MedicareNo")
				Me.OnMedicareNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MedCardPositionNo", DbType:="TinyInt")>  _
	Public Property MedCardPositionNo() As System.Nullable(Of Byte)
		Get
			Return Me._MedCardPositionNo
		End Get
		Set
			If (Me._MedCardPositionNo.Equals(value) = false) Then
				Me.OnMedCardPositionNoChanging(value)
				Me.SendPropertyChanging
				Me._MedCardPositionNo = value
				Me.SendPropertyChanged("MedCardPositionNo")
				Me.OnMedCardPositionNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(30)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MiddleName", DbType:="VarChar(50)")>  _
	Public Property MiddleName() As String
		Get
			Return Me._MiddleName
		End Get
		Set
			If (String.Equals(Me._MiddleName, value) = false) Then
				Me.OnMiddleNameChanging(value)
				Me.SendPropertyChanging
				Me._MiddleName = value
				Me.SendPropertyChanged("MiddleName")
				Me.OnMiddleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(60)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SuburbID", DbType:="Int NOT NULL")>  _
	Public Property SuburbID() As Integer
		Get
			Return Me._SuburbID
		End Get
		Set
			If ((Me._SuburbID = value)  _
						= false) Then
				If Me._Postcode.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSuburbIDChanging(value)
				Me.SendPropertyChanging
				Me._SuburbID = value
				Me.SendPropertyChanged("SuburbID")
				Me.OnSuburbIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HomePhone", DbType:="VarChar(40)")>  _
	Public Property HomePhone() As String
		Get
			Return Me._HomePhone
		End Get
		Set
			If (String.Equals(Me._HomePhone, value) = false) Then
				Me.OnHomePhoneChanging(value)
				Me.SendPropertyChanging
				Me._HomePhone = value
				Me.SendPropertyChanged("HomePhone")
				Me.OnHomePhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkPhone", DbType:="VarChar(40)")>  _
	Public Property WorkPhone() As String
		Get
			Return Me._WorkPhone
		End Get
		Set
			If (String.Equals(Me._WorkPhone, value) = false) Then
				Me.OnWorkPhoneChanging(value)
				Me.SendPropertyChanging
				Me._WorkPhone = value
				Me.SendPropertyChanged("WorkPhone")
				Me.OnWorkPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobilePhone", DbType:="VarChar(40)")>  _
	Public Property MobilePhone() As String
		Get
			Return Me._MobilePhone
		End Get
		Set
			If (String.Equals(Me._MobilePhone, value) = false) Then
				Me.OnMobilePhoneChanging(value)
				Me.SendPropertyChanging
				Me._MobilePhone = value
				Me.SendPropertyChanged("MobilePhone")
				Me.OnMobilePhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OtherInfo", DbType:="VarChar(200)")>  _
	Public Property OtherInfo() As String
		Get
			Return Me._OtherInfo
		End Get
		Set
			If (String.Equals(Me._OtherInfo, value) = false) Then
				Me.OnOtherInfoChanging(value)
				Me.SendPropertyChanging
				Me._OtherInfo = value
				Me.SendPropertyChanged("OtherInfo")
				Me.OnOtherInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="VarChar(100)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfBirth", DbType:="SmallDateTime")>  _
	Public Property DateOfBirth() As System.Nullable(Of Date)
		Get
			Return Me._DateOfBirth
		End Get
		Set
			If (Me._DateOfBirth.Equals(value) = false) Then
				Me.OnDateOfBirthChanging(value)
				Me.SendPropertyChanging
				Me._DateOfBirth = value
				Me.SendPropertyChanged("DateOfBirth")
				Me.OnDateOfBirthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sex", DbType:="Char(1)")>  _
	Public Property Sex() As System.Nullable(Of Char)
		Get
			Return Me._Sex
		End Get
		Set
			If (Me._Sex.Equals(value) = false) Then
				Me.OnSexChanging(value)
				Me.SendPropertyChanging
				Me._Sex = value
				Me.SendPropertyChanged("Sex")
				Me.OnSexChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DoctorID", DbType:="Int")>  _
	Public Property DoctorID() As System.Nullable(Of Integer)
		Get
			Return Me._DoctorID
		End Get
		Set
			If (Me._DoctorID.Equals(value) = false) Then
				If Me._Doctor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDoctorIDChanging(value)
				Me.SendPropertyChanging
				Me._DoctorID = value
				Me.SendPropertyChanged("DoctorID")
				Me.OnDoctorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReferralDate", DbType:="SmallDateTime")>  _
	Public Property ReferralDate() As System.Nullable(Of Date)
		Get
			Return Me._ReferralDate
		End Get
		Set
			If (Me._ReferralDate.Equals(value) = false) Then
				Me.OnReferralDateChanging(value)
				Me.SendPropertyChanging
				Me._ReferralDate = value
				Me.SendPropertyChanged("ReferralDate")
				Me.OnReferralDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReferralLength", DbType:="VarChar(10)")>  _
	Public Property ReferralLength() As String
		Get
			Return Me._ReferralLength
		End Get
		Set
			If (String.Equals(Me._ReferralLength, value) = false) Then
				Me.OnReferralLengthChanging(value)
				Me.SendPropertyChanging
				Me._ReferralLength = value
				Me.SendPropertyChanged("ReferralLength")
				Me.OnReferralLengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReferralReport", DbType:="VarChar(10)")>  _
	Public Property ReferralReport() As String
		Get
			Return Me._ReferralReport
		End Get
		Set
			If (String.Equals(Me._ReferralReport, value) = false) Then
				Me.OnReferralReportChanging(value)
				Me.SendPropertyChanging
				Me._ReferralReport = value
				Me.SendPropertyChanged("ReferralReport")
				Me.OnReferralReportChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SymptomsCategory", DbType:="VarChar(50)")>  _
	Public Property SymptomsCategory() As String
		Get
			Return Me._SymptomsCategory
		End Get
		Set
			If (String.Equals(Me._SymptomsCategory, value) = false) Then
				Me.OnSymptomsCategoryChanging(value)
				Me.SendPropertyChanging
				Me._SymptomsCategory = value
				Me.SendPropertyChanged("SymptomsCategory")
				Me.OnSymptomsCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PotentialStudy", DbType:="VarChar(50)")>  _
	Public Property PotentialStudy() As String
		Get
			Return Me._PotentialStudy
		End Get
		Set
			If (String.Equals(Me._PotentialStudy, value) = false) Then
				Me.OnPotentialStudyChanging(value)
				Me.SendPropertyChanging
				Me._PotentialStudy = value
				Me.SendPropertyChanged("PotentialStudy")
				Me.OnPotentialStudyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Progress", DbType:="VarChar(50)")>  _
	Public Property Progress() As String
		Get
			Return Me._Progress
		End Get
		Set
			If (String.Equals(Me._Progress, value) = false) Then
				Me.OnProgressChanging(value)
				Me.SendPropertyChanging
				Me._Progress = value
				Me.SendPropertyChanged("Progress")
				Me.OnProgressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileLocation", DbType:="VarChar(70)")>  _
	Public Property FileLocation() As String
		Get
			Return Me._FileLocation
		End Get
		Set
			If (String.Equals(Me._FileLocation, value) = false) Then
				Me.OnFileLocationChanging(value)
				Me.SendPropertyChanging
				Me._FileLocation = value
				Me.SendPropertyChanged("FileLocation")
				Me.OnFileLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaritalStatus", DbType:="VarChar(50)")>  _
	Public Property MaritalStatus() As String
		Get
			Return Me._MaritalStatus
		End Get
		Set
			If (String.Equals(Me._MaritalStatus, value) = false) Then
				Me.OnMaritalStatusChanging(value)
				Me.SendPropertyChanging
				Me._MaritalStatus = value
				Me.SendPropertyChanged("MaritalStatus")
				Me.OnMaritalStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FathersFullName", DbType:="VarChar(200)")>  _
	Public Property FathersFullName() As String
		Get
			Return Me._FathersFullName
		End Get
		Set
			If (String.Equals(Me._FathersFullName, value) = false) Then
				Me.OnFathersFullNameChanging(value)
				Me.SendPropertyChanging
				Me._FathersFullName = value
				Me.SendPropertyChanged("FathersFullName")
				Me.OnFathersFullNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MothersFullName", DbType:="VarChar(200)")>  _
	Public Property MothersFullName() As String
		Get
			Return Me._MothersFullName
		End Get
		Set
			If (String.Equals(Me._MothersFullName, value) = false) Then
				Me.OnMothersFullNameChanging(value)
				Me.SendPropertyChanging
				Me._MothersFullName = value
				Me.SendPropertyChanged("MothersFullName")
				Me.OnMothersFullNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FathersSurname", DbType:="VarChar(50)")>  _
	Public Property FathersSurname() As String
		Get
			Return Me._FathersSurname
		End Get
		Set
			If (String.Equals(Me._FathersSurname, value) = false) Then
				Me.OnFathersSurnameChanging(value)
				Me.SendPropertyChanging
				Me._FathersSurname = value
				Me.SendPropertyChanged("FathersSurname")
				Me.OnFathersSurnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MothersMaidenName", DbType:="VarChar(50)")>  _
	Public Property MothersMaidenName() As String
		Get
			Return Me._MothersMaidenName
		End Get
		Set
			If (String.Equals(Me._MothersMaidenName, value) = false) Then
				Me.OnMothersMaidenNameChanging(value)
				Me.SendPropertyChanging
				Me._MothersMaidenName = value
				Me.SendPropertyChanged("MothersMaidenName")
				Me.OnMothersMaidenNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryOfBirth", DbType:="VarChar(50)")>  _
	Public Property CountryOfBirth() As String
		Get
			Return Me._CountryOfBirth
		End Get
		Set
			If (String.Equals(Me._CountryOfBirth, value) = false) Then
				Me.OnCountryOfBirthChanging(value)
				Me.SendPropertyChanging
				Me._CountryOfBirth = value
				Me.SendPropertyChanged("CountryOfBirth")
				Me.OnCountryOfBirthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrefLanguage", DbType:="VarChar(60)")>  _
	Public Property PrefLanguage() As String
		Get
			Return Me._PrefLanguage
		End Get
		Set
			If (String.Equals(Me._PrefLanguage, value) = false) Then
				Me.OnPrefLanguageChanging(value)
				Me.SendPropertyChanging
				Me._PrefLanguage = value
				Me.SendPropertyChanged("PrefLanguage")
				Me.OnPrefLanguageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aboriginality", DbType:="VarChar(50)")>  _
	Public Property Aboriginality() As String
		Get
			Return Me._Aboriginality
		End Get
		Set
			If (String.Equals(Me._Aboriginality, value) = false) Then
				Me.OnAboriginalityChanging(value)
				Me.SendPropertyChanging
				Me._Aboriginality = value
				Me.SendPropertyChanged("Aboriginality")
				Me.OnAboriginalityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InterpreterRequired", DbType:="VarChar(50)")>  _
	Public Property InterpreterRequired() As String
		Get
			Return Me._InterpreterRequired
		End Get
		Set
			If (String.Equals(Me._InterpreterRequired, value) = false) Then
				Me.OnInterpreterRequiredChanging(value)
				Me.SendPropertyChanging
				Me._InterpreterRequired = value
				Me.SendPropertyChanged("InterpreterRequired")
				Me.OnInterpreterRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PatientUsername", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property PatientUsername() As String
		Get
			Return Me._PatientUsername
		End Get
		Set
			If (String.Equals(Me._PatientUsername, value) = false) Then
				Me.OnPatientUsernameChanging(value)
				Me.SendPropertyChanging
				Me._PatientUsername = value
				Me.SendPropertyChanged("PatientUsername")
				Me.OnPatientUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PatientPassword", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property PatientPassword() As String
		Get
			Return Me._PatientPassword
		End Get
		Set
			If (String.Equals(Me._PatientPassword, value) = false) Then
				Me.OnPatientPasswordChanging(value)
				Me.SendPropertyChanging
				Me._PatientPassword = value
				Me.SendPropertyChanged("PatientPassword")
				Me.OnPatientPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatePatientCreated", DbType:="SmallDateTime")>  _
	Public Property DatePatientCreated() As System.Nullable(Of Date)
		Get
			Return Me._DatePatientCreated
		End Get
		Set
			If (Me._DatePatientCreated.Equals(value) = false) Then
				Me.OnDatePatientCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DatePatientCreated = value
				Me.SendPropertyChanged("DatePatientCreated")
				Me.OnDatePatientCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PatientCreatedBy", DbType:="VarChar(50)")>  _
	Public Property PatientCreatedBy() As String
		Get
			Return Me._PatientCreatedBy
		End Get
		Set
			If (String.Equals(Me._PatientCreatedBy, value) = false) Then
				Me.OnPatientCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._PatientCreatedBy = value
				Me.SendPropertyChanged("PatientCreatedBy")
				Me.OnPatientCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedBy", DbType:="VarChar(50)")>  _
	Public Property LastUpdatedBy() As String
		Get
			Return Me._LastUpdatedBy
		End Get
		Set
			If (String.Equals(Me._LastUpdatedBy, value) = false) Then
				Me.OnLastUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedBy = value
				Me.SendPropertyChanged("LastUpdatedBy")
				Me.OnLastUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdated", DbType:="SmallDateTime")>  _
	Public Property LastUpdated() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdated
		End Get
		Set
			If (Me._LastUpdated.Equals(value) = false) Then
				Me.OnLastUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdated = value
				Me.SendPropertyChanged("LastUpdated")
				Me.OnLastUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Patient_PatientsAllergyQLD", Storage:="_PatientsAllergyQLDs", ThisKey:="PatientID", OtherKey:="PatientID")>  _
	Public Property PatientsAllergyQLDs() As EntitySet(Of PatientsAllergyQLD)
		Get
			Return Me._PatientsAllergyQLDs
		End Get
		Set
			Me._PatientsAllergyQLDs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Postcode_Patient", Storage:="_Postcode", ThisKey:="SuburbID", OtherKey:="SuburbID", IsForeignKey:=true)>  _
	Public Property Postcode() As Postcode
		Get
			Return Me._Postcode.Entity
		End Get
		Set
			Dim previousValue As Postcode = Me._Postcode.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Postcode.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Postcode.Entity = Nothing
					previousValue.Patients.Remove(Me)
				End If
				Me._Postcode.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Patients.Add(Me)
					Me._SuburbID = value.SuburbID
				Else
					Me._SuburbID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Postcode")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Doctor_Patient", Storage:="_Doctor", ThisKey:="DoctorID", OtherKey:="DoctorID", IsForeignKey:=true)>  _
	Public Property Doctor() As Doctor
		Get
			Return Me._Doctor.Entity
		End Get
		Set
			Dim previousValue As Doctor = Me._Doctor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Doctor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Doctor.Entity = Nothing
					previousValue.Patients.Remove(Me)
				End If
				Me._Doctor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Patients.Add(Me)
					Me._DoctorID = value.DoctorID
				Else
					Me._DoctorID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Doctor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PatientsAllergyQLDs(ByVal entity As PatientsAllergyQLD)
		Me.SendPropertyChanging
		entity.Patient = Me
	End Sub
	
	Private Sub detach_PatientsAllergyQLDs(ByVal entity As PatientsAllergyQLD)
		Me.SendPropertyChanging
		entity.Patient = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Postcodes")>  _
Partial Public Class Postcode
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SuburbID As Integer
	
	Private _Suburb As String
	
	Private _State As String
	
	Private _Postcode As String
	
	Private _Patients As EntitySet(Of Patient)
	
	Private _Doctors As EntitySet(Of Doctor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSuburbIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSuburbIDChanged()
    End Sub
    Partial Private Sub OnSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnSuburbChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnPostcodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostcodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Patients = New EntitySet(Of Patient)(AddressOf Me.attach_Patients, AddressOf Me.detach_Patients)
		Me._Doctors = New EntitySet(Of Doctor)(AddressOf Me.attach_Doctors, AddressOf Me.detach_Doctors)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SuburbID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SuburbID() As Integer
		Get
			Return Me._SuburbID
		End Get
		Set
			If ((Me._SuburbID = value)  _
						= false) Then
				Me.OnSuburbIDChanging(value)
				Me.SendPropertyChanging
				Me._SuburbID = value
				Me.SendPropertyChanged("SuburbID")
				Me.OnSuburbIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Suburb", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property Suburb() As String
		Get
			Return Me._Suburb
		End Get
		Set
			If (String.Equals(Me._Suburb, value) = false) Then
				Me.OnSuburbChanging(value)
				Me.SendPropertyChanging
				Me._Suburb = value
				Me.SendPropertyChanged("Suburb")
				Me.OnSuburbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Postcode", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property Postcode() As String
		Get
			Return Me._Postcode
		End Get
		Set
			If (String.Equals(Me._Postcode, value) = false) Then
				Me.OnPostcodeChanging(value)
				Me.SendPropertyChanging
				Me._Postcode = value
				Me.SendPropertyChanged("Postcode")
				Me.OnPostcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Postcode_Patient", Storage:="_Patients", ThisKey:="SuburbID", OtherKey:="SuburbID")>  _
	Public Property Patients() As EntitySet(Of Patient)
		Get
			Return Me._Patients
		End Get
		Set
			Me._Patients.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Postcode_Doctor", Storage:="_Doctors", ThisKey:="SuburbID", OtherKey:="SuburbID")>  _
	Public Property Doctors() As EntitySet(Of Doctor)
		Get
			Return Me._Doctors
		End Get
		Set
			Me._Doctors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Patients(ByVal entity As Patient)
		Me.SendPropertyChanging
		entity.Postcode = Me
	End Sub
	
	Private Sub detach_Patients(ByVal entity As Patient)
		Me.SendPropertyChanging
		entity.Postcode = Nothing
	End Sub
	
	Private Sub attach_Doctors(ByVal entity As Doctor)
		Me.SendPropertyChanging
		entity.Postcode = Me
	End Sub
	
	Private Sub detach_Doctors(ByVal entity As Doctor)
		Me.SendPropertyChanging
		entity.Postcode = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Doctors")>  _
Partial Public Class Doctor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DoctorID As Integer
	
	Private _Title As String
	
	Private _LastName As String
	
	Private _FirstName As String
	
	Private _ProviderNo As String
	
	Private _Address As String
	
	Private _SuburbID As System.Nullable(Of Integer)
	
	Private _Specialty As String
	
	Private _Phone As String
	
	Private _Fax As String
	
	Private _EmailAddress As String
	
	Private _OtherInfo As String
	
	Private _LastUpdatedBy As String
	
	Private _LastUpdated As System.Nullable(Of Date)
	
	Private _Patients As EntitySet(Of Patient)
	
	Private _Postcode As EntityRef(Of Postcode)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDoctorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnDoctorIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnProviderNoChanging(value As String)
    End Sub
    Partial Private Sub OnProviderNoChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnSuburbIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSuburbIDChanged()
    End Sub
    Partial Private Sub OnSpecialtyChanging(value As String)
    End Sub
    Partial Private Sub OnSpecialtyChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnFaxChanging(value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnOtherInfoChanging(value As String)
    End Sub
    Partial Private Sub OnOtherInfoChanged()
    End Sub
    Partial Private Sub OnLastUpdatedByChanging(value As String)
    End Sub
    Partial Private Sub OnLastUpdatedByChanged()
    End Sub
    Partial Private Sub OnLastUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Patients = New EntitySet(Of Patient)(AddressOf Me.attach_Patients, AddressOf Me.detach_Patients)
		Me._Postcode = CType(Nothing, EntityRef(Of Postcode))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DoctorID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DoctorID() As Integer
		Get
			Return Me._DoctorID
		End Get
		Set
			If ((Me._DoctorID = value)  _
						= false) Then
				Me.OnDoctorIDChanging(value)
				Me.SendPropertyChanging
				Me._DoctorID = value
				Me.SendPropertyChanged("DoctorID")
				Me.OnDoctorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(30)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProviderNo", DbType:="VarChar(15)")>  _
	Public Property ProviderNo() As String
		Get
			Return Me._ProviderNo
		End Get
		Set
			If (String.Equals(Me._ProviderNo, value) = false) Then
				Me.OnProviderNoChanging(value)
				Me.SendPropertyChanging
				Me._ProviderNo = value
				Me.SendPropertyChanged("ProviderNo")
				Me.OnProviderNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(80)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SuburbID", DbType:="Int")>  _
	Public Property SuburbID() As System.Nullable(Of Integer)
		Get
			Return Me._SuburbID
		End Get
		Set
			If (Me._SuburbID.Equals(value) = false) Then
				If Me._Postcode.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSuburbIDChanging(value)
				Me.SendPropertyChanging
				Me._SuburbID = value
				Me.SendPropertyChanged("SuburbID")
				Me.OnSuburbIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Specialty", DbType:="VarChar(70)")>  _
	Public Property Specialty() As String
		Get
			Return Me._Specialty
		End Get
		Set
			If (String.Equals(Me._Specialty, value) = false) Then
				Me.OnSpecialtyChanging(value)
				Me.SendPropertyChanging
				Me._Specialty = value
				Me.SendPropertyChanged("Specialty")
				Me.OnSpecialtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="VarChar(40)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="VarChar(40)")>  _
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, value) = false) Then
				Me.OnFaxChanging(value)
				Me.SendPropertyChanging
				Me._Fax = value
				Me.SendPropertyChanged("Fax")
				Me.OnFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="VarChar(100)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OtherInfo", DbType:="VarChar(200)")>  _
	Public Property OtherInfo() As String
		Get
			Return Me._OtherInfo
		End Get
		Set
			If (String.Equals(Me._OtherInfo, value) = false) Then
				Me.OnOtherInfoChanging(value)
				Me.SendPropertyChanging
				Me._OtherInfo = value
				Me.SendPropertyChanged("OtherInfo")
				Me.OnOtherInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedBy", DbType:="VarChar(50)")>  _
	Public Property LastUpdatedBy() As String
		Get
			Return Me._LastUpdatedBy
		End Get
		Set
			If (String.Equals(Me._LastUpdatedBy, value) = false) Then
				Me.OnLastUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedBy = value
				Me.SendPropertyChanged("LastUpdatedBy")
				Me.OnLastUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdated", DbType:="SmallDateTime")>  _
	Public Property LastUpdated() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdated
		End Get
		Set
			If (Me._LastUpdated.Equals(value) = false) Then
				Me.OnLastUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdated = value
				Me.SendPropertyChanged("LastUpdated")
				Me.OnLastUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Doctor_Patient", Storage:="_Patients", ThisKey:="DoctorID", OtherKey:="DoctorID")>  _
	Public Property Patients() As EntitySet(Of Patient)
		Get
			Return Me._Patients
		End Get
		Set
			Me._Patients.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Postcode_Doctor", Storage:="_Postcode", ThisKey:="SuburbID", OtherKey:="SuburbID", IsForeignKey:=true)>  _
	Public Property Postcode() As Postcode
		Get
			Return Me._Postcode.Entity
		End Get
		Set
			Dim previousValue As Postcode = Me._Postcode.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Postcode.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Postcode.Entity = Nothing
					previousValue.Doctors.Remove(Me)
				End If
				Me._Postcode.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Doctors.Add(Me)
					Me._SuburbID = value.SuburbID
				Else
					Me._SuburbID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Postcode")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Patients(ByVal entity As Patient)
		Me.SendPropertyChanging
		entity.Doctor = Me
	End Sub
	
	Private Sub detach_Patients(ByVal entity As Patient)
		Me.SendPropertyChanging
		entity.Doctor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PatientsAllergyQLD")>  _
Partial Public Class PatientsAllergyQLD
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PatientID As Integer
	
	Private _patient_id_qld As Integer
	
	Private _Patient As EntityRef(Of Patient)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPatientIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPatientIDChanged()
    End Sub
    Partial Private Sub Onpatient_id_qldChanging(value As Integer)
    End Sub
    Partial Private Sub Onpatient_id_qldChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Patient = CType(Nothing, EntityRef(Of Patient))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PatientID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PatientID() As Integer
		Get
			Return Me._PatientID
		End Get
		Set
			If ((Me._PatientID = value)  _
						= false) Then
				If Me._Patient.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPatientIDChanging(value)
				Me.SendPropertyChanging
				Me._PatientID = value
				Me.SendPropertyChanged("PatientID")
				Me.OnPatientIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_patient_id_qld", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property patient_id_qld() As Integer
		Get
			Return Me._patient_id_qld
		End Get
		Set
			If ((Me._patient_id_qld = value)  _
						= false) Then
				Me.Onpatient_id_qldChanging(value)
				Me.SendPropertyChanging
				Me._patient_id_qld = value
				Me.SendPropertyChanged("patient_id_qld")
				Me.Onpatient_id_qldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Patient_PatientsAllergyQLD", Storage:="_Patient", ThisKey:="PatientID", OtherKey:="PatientID", IsForeignKey:=true)>  _
	Public Property Patient() As Patient
		Get
			Return Me._Patient.Entity
		End Get
		Set
			Dim previousValue As Patient = Me._Patient.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Patient.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Patient.Entity = Nothing
					previousValue.PatientsAllergyQLDs.Remove(Me)
				End If
				Me._Patient.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PatientsAllergyQLDs.Add(Me)
					Me._PatientID = value.PatientID
				Else
					Me._PatientID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Patient")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
